body {
    background: rgba(0, 0, 0, 0.01);
    font-family: Verdana, sans-serif;
}

.container {
    width: 960px;
    margin: 0 auto;
    font-size: 100%;
    line-height: 1.5;
}


/*CLEAR FIX SOLLUTION*/

.clearfix:before,
.clearfix:after {
    content: " ";
    /* 1 */
    display: table;
    /* 2 */
}

.clearfix:after {
    clear: both;
}


/**
 * For IE 6/7 only
 * Include this rule to trigger hasLayout and contain floats.
 */

.clearfix {
    *zoom: 1;
}

/**************************************************************
default display of elements on your page is called "stacked"

to get your elements on the same line we use something called flexbox
to invoke flexbox use the rule ::after
    display: flex;

flexbox attempss to place all elements within its "immediate specified container" are on the same line

Immediate?? the next level of elements

flexbox will automatically adjust measurements to get all element to appear on the same line REGARDLESS of the physical width set for the element

problem: I don't want all elements on the same line having their measurement altered

solution: afte the default wrapping for flexbox which is nowrap (none)

rule: flex-wrap: wrap;

This will place as many elements as possible on a single row without adjusting the measurements of your elements,
Any leftover elements will wrap to the following line until all elements have been displayed

WARNING: 
- flex-wrap affect a flex display area. without the display: flex; rule, flex-wrap is meaningless.
- flexbox will affect positioning that is normal within your page such as margin collapse.
********************************************************************/

main{
    background-color: lightgray;
    display: flex;
    flex-wrap: wrap;
    border: 2px solid black;
}


/************************************************************************
given the classes some height and width due to the fact that the elements do NOT contain any textural content
set height to a choosen value of 300px
set the width of each box to fix the final given image
margin: 30px
padding and border = 0
page width = 960;

page-width = (box) + (box) + ... + remainder

our boxes are of an equal size

page-width = ncolumns * (box) + remainder
960 = 2 * (lm + lb + lp + content + rp + rb + rm + remainder
960 = 2 * (30 + 0 + 0 + content + 0 + 0 + 0) + 30
960 = 60 + 30 + 2content
960 - 90 = 2content
870 / 2 = content
435 = content
**************************************************************************/

.asideSize{
    height: 600px;
    width: 150px;
    margin: 10px 0px 10px 10px;
    border: 2px solid black;
}

.red-paint{
    background-color: red;
}

/******************************************************************************************************************
page = (column 1) + lm + lb + lp + content + rp + rb + rm + remainder
960 = (10 + 2 + 0 + 150 + 0 + 2 + 0) + 10 + 2 + 0 + content + 0 + 2 + 10 + (4)
960 = 192 + content
768 = content

the height of the right column items can use a similar calculation as the horizontal width layout

the one item you MUST remember is that the vertical margin (VM) between item are collapsed

the largest VM i use between any two single items

aside is 600 px

600 = 2(tb + tp + content + bp + bb) + VM
600 = 2(2 + 0 + content + 0 + 2) + 10
600 = 8 + 2content + 10
600 = 2content + 18
582 = 2content
291 = content

this ONLY works because the content area height is the same as the vertical margin

NORMALLY vertical height is determined by the content of 
******************************************************************************************************************/

.contentSize{
    margin: 10px 0px 10px 10px;
    border: 2px solid black;
    height: 291px;
    width: 768px;
}

.blue-paint{
    background-color: blue;
}

.green-paint{
    background-color: green;
}